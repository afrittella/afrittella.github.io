{"version":3,"sources":["AlphabetManager.js","components/ui/Box.js","components/ui/button/styled.js","components/ui/button/index.js","components/ui/LetterBox.js","components/GameBoard.jsx","components/ui/CenteredBox.js","components/ui/AppTitle.js","App.jsx","serviceWorker.js","theme/base.js","index.jsx"],"names":["AlphabetManager","alphabet","complexLetters","easyMode","extractedLetters","availableLetters","easy","this","selectAvailableLetters","length","Error","index","Math","floor","random","extractedLetter","filter","letter","push","includes","BoxStyle","styled","div","props","transparent","BoxContent","Box","children","title","BaseButton","button","SuccessButton","CancelButton","Button","onClick","type","Element","renderButton","chooseButton","LetterBoxStyle","LetterBoxContent","LetterBox","className","manager","React","useState","gameStatus","setGameStatus","current","setCurrent","available","setAvailable","extracted","setExtracted","selectAlphabet","start","undefined","useEffect","extract","e","map","Fragment","key","CenteredWrapper","CenteredBox","Boolean","window","location","hostname","match","Base","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.043e323d.chunk.js","sourcesContent":["class AlphabetManager {\n    alphabet = [\n        'A',\n        'B',\n        'C',\n        'D',\n        'E',\n        'F',\n        'G',\n        'H',\n        'I',\n        'J',\n        'K',\n        'L',\n        'M',\n        'N',\n        'O',\n        'P',\n        'Q',\n        'R',\n        'S',\n        'T',\n        'U',\n        'V',\n        'W',\n        'X',\n        'Y',\n        'Z',\n    ]\n    complexLetters = ['H', 'K', 'J', 'W', 'X', 'Y']\n    easyMode = true\n    extractedLetters = []\n    availableLetters = []\n\n    get available() {\n        return this.availableLetters\n    }\n\n    get extracted() {\n        return this.extractedLetters\n    }\n\n    get easy() {\n        return this.easyMode\n    }\n\n    start(easy = true) {\n        this.easyMode = easy\n        this.extractedLetters = []\n        this.selectAvailableLetters()\n    }\n\n    extract() {\n        if (this.availableLetters.length === 0) {\n            throw new Error('No more letters')\n        }\n\n        const index = Math.floor(Math.random() * this.availableLetters.length)\n        const extractedLetter = this.availableLetters[index]\n\n        this.availableLetters = this.availableLetters.filter(\n            (letter) => letter !== extractedLetter,\n        )\n        this.extractedLetters.push(extractedLetter)\n\n        return extractedLetter\n    }\n\n    selectAvailableLetters() {\n        if (this.easyMode) {\n            this.availableLetters = this.alphabet.filter(\n                (letter) => !this.complexLetters.includes(letter),\n            )\n            return\n        }\n\n        this.availableLetters = [...this.alphabet]\n    }\n}\n\nexport default AlphabetManager\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport const BoxStyle = styled.div`\n    background-color: ${(props) =>\n        props.transparent ? 'transparent' : '#EEE'};\n    width: 95%;\n    padding: 20px;\n    font-size: 1.8rem;\n    h4 {\n        margin: 0 0 10px 0;\n        padding: 0;\n        font-size: 2.2rem;\n    }\n    box-shadow: ${(props) =>\n        !props.transparent ? '0 0 8px 0 rgba(106, 107, 96, 0.42)' : 'none'};\n`\n\nexport const BoxContent = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: #333;\n`\n\nconst Box = ({ children, transparent = true, title }) => {\n    return (\n        <BoxStyle transparent={transparent}>\n            {title && <h4>{title}</h4>}\n            <BoxContent>{children}</BoxContent>\n        </BoxStyle>\n    )\n}\n\nexport default Box\n","import styled from 'styled-components'\n\nexport const BaseButton = styled.button`\n    border-width: 0;\n    text-transform: uppercase;\n    font-family: 'Quando', serif;\n    font-size: 1.8rem;\n    border-radius: 5px;\n    padding: 10px;\n    background-color: #c11212;\n    color: #fff;\n    box-shadow: 0 0 8px 0 rgba(106, 107, 96, 0.42);\n`\n\nexport const SuccessButton = styled(BaseButton)`\n    background-color: #00679f;\n    padding: 15px;\n    border-radius: 50%;\n    width: 150px;\n    height: 150px;\n    font-size: 2.2rem;\n`\n\nexport const CancelButton = styled(BaseButton)`\n    background-color: #aaa;\n`\n","import React from 'react'\nimport {\n    BaseButton,\n    CancelButton,\n    SuccessButton,\n} from 'components/ui/button/styled'\n\nconst Button = ({ children, onClick = () => {}, type = 'base' }) => {\n    const chooseButton = (type) => {\n        switch (type) {\n            case 'success':\n                return SuccessButton\n            case 'cancel':\n                return CancelButton\n            default:\n                return BaseButton\n        }\n    }\n\n    const renderButton = (Element, children) => {\n        return <Element onClick={onClick}>{children}</Element>\n    }\n\n    return renderButton(chooseButton(type), children)\n}\n\nexport default Button\n","import React from 'react'\nimport styled from 'styled-components'\nimport { BoxContent, BoxStyle } from 'components/ui/Box'\n\nconst LetterBoxStyle = styled(BoxStyle)`\n    width: 150px;\n    height: 150px;\n    font-size: 8rem;\n    font-weight: bold;\n    border-radius: 50%;\n    padding: 10px;\n`\n\nconst LetterBoxContent = styled(BoxContent)`\n    justify-content: center;\n    color: #00679f;\n`\n\nconst LetterBox = ({ className, children }) => {\n    return (\n        <LetterBoxStyle className={className}>\n            <LetterBoxContent>{children}</LetterBoxContent>\n        </LetterBoxStyle>\n    )\n}\n\nexport default LetterBox\n","import React from 'react'\nimport styled from 'styled-components'\nimport AlphabetManager from 'AlphabetManager'\nimport Box from 'components/ui/Box'\nimport Button from 'components/ui/button'\nimport LetterBox from 'components/ui/LetterBox'\n\nconst manager = new AlphabetManager()\n\nconst GameBoard = ({ className }) => {\n    const [gameStatus, setGameStatus] = React.useState('ready')\n    const [current, setCurrent] = React.useState()\n    const [available, setAvailable] = React.useState([])\n    const [extracted, setExtracted] = React.useState([])\n\n    const selectAlphabet = (easy) => {\n        manager.start(easy)\n        setGameStatus('started')\n        setAvailable(manager.available)\n        setExtracted(manager.extracted)\n        setCurrent(undefined)\n    }\n\n    const extract = () => {\n        try {\n            const extractedLetter = manager.extract()\n            setCurrent(extractedLetter)\n        } catch (e) {\n            setGameStatus('finished')\n        }\n    }\n\n    React.useEffect(() => {\n        if (current) {\n            setAvailable(manager.available)\n            setExtracted(manager.extracted)\n        }\n    }, [current])\n\n    return (\n        <div className={className}>\n            {gameStatus === 'ready' && (\n                <>\n                    <Box\n                        title=\"Seleziona il tipo di alfabeto per iniziare\"\n                        transparent={false}\n                    >\n                        <Button onClick={() => selectAlphabet(true)}>\n                            Facile\n                        </Button>{' '}\n                        <Button onClick={() => selectAlphabet(false)}>\n                            Difficile\n                        </Button>\n                    </Box>\n                </>\n            )}\n            {gameStatus === 'started' && (\n                <>\n                    <Box>\n                        <LetterBox>{current}</LetterBox>\n                        <Button onClick={extract} type=\"success\">\n                            Estrai\n                        </Button>\n                    </Box>\n                    <Box transparent={false} title=\"Lettere rimaste\">\n                        {available.map((letter) => (\n                            <React.Fragment key={`available_${letter}`}>\n                                {letter}{' '}\n                            </React.Fragment>\n                        ))}\n                    </Box>\n                    <Box transparent={false} title=\"Lettere estratte\">\n                        {extracted.map((letter) => (\n                            <React.Fragment key={`available_${letter}`}>\n                                {letter}{' '}\n                            </React.Fragment>\n                        ))}\n                    </Box>\n                    <Box>\n                        <p>\n                            <Button\n                                onClick={() => setGameStatus('ready')}\n                                type=\"cancel\"\n                            >\n                                Ricomincia\n                            </Button>\n                        </p>\n                    </Box>\n                </>\n            )}\n            {gameStatus === 'finished' && (\n                <Box title=\"Partita finita!\" transparent={false}>\n                    <Button onClick={() => setGameStatus('ready')}>\n                        Ricomincia\n                    </Button>\n                </Box>\n            )}\n        </div>\n    )\n}\n\nexport default styled(GameBoard)`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    & > div {\n        margin-top: 20px;\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst CenteredWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-content: center;\n`\n\nconst CenteredBox = ({ children }) => {\n    return <CenteredWrapper>{children}</CenteredWrapper>\n}\n\nexport default CenteredBox\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst AppTitle = ({ title, className }) => (\n    <div className={className}>\n        <h1>{title}</h1>\n    </div>\n)\n\nexport default styled(AppTitle)`\n    width: 100%;\n    background: #cccccc;\n    text-align: center;\n    padding: 20px 0;\n\n    h1 {\n        width: 100%;\n        margin: 0;\n        margin-block-start: 0;\n        //text-transform: uppercase;\n        font-family: 'Quando', serif;\n        font-size: 2.8rem;\n        font-weight: bold;\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport GameBoard from 'components/GameBoard'\nimport CenteredBox from 'components/ui/CenteredBox'\nimport AppTitle from 'components/ui/AppTitle'\n\nfunction App({ className }) {\n    return (\n        <div className={className}>\n            <AppTitle title=\"Frutta e Fiori\" />\n            <CenteredBox>\n                <GameBoard />\n            </CenteredBox>\n        </div>\n    )\n}\n\nexport default styled(App)`\n    display: flex;\n    flex-direction: column;\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nconst Base = createGlobalStyle` \n    :root {\n      --main-font-size: 62.5%;\n      --background-color: #DDDDDD;\n    }\n    \n    html {      \n      font-size: var(--main-font-size);      \n    }\n    \n    body {     \n      background-color: var(--background-color);\n      font-family: 'Judson', serif;           \n    }\n    \n    #root {\n      height: 100vh;\n      width: 100%;\n    }\n    \n    button {\n        &:focus,\n        &:active {       \n            outline: none;\n        }  \n    }\n`\n\nexport default Base\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'index.css'\nimport App from 'App'\nimport * as serviceWorker from './serviceWorker'\nimport Base from 'theme/base'\n\nReactDOM.render(\n    <>\n        <Base />\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </>,\n    document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}